from __future__ import annotations
import datetime as dt
import tempfile
import numpy as np
import pandas as pd
import xarray as xr
from scipy.ndimage import gaussian_filter

def build_weather_dataset(lat_axis: np.ndarray,
                          lon_axis: np.ndarray,
                          elevation_grid: np.ndarray,
                          slope_grid: np.ndarray,
                          seed: int) -> xr.Dataset:
    """
    Create CF-friendly Dataset with hourly wind/pressure/thermal/turbine flags + topography.
    """
    np.random.seed(seed)
    n_lat = len(lat_axis)
    n_lon = len(lon_axis)

    times = pd.date_range("2023-01-01", "2023-12-31 23:00:00", freq="h")

    base_wind_speed = (
        5
        + 5 * np.sin(2 * np.pi * np.arange(len(times)) / 24.0)
        + np.random.normal(0, 2, len(times))
    ).astype(np.float32)

    wind_factor = (0.01 * elevation_grid + 0.005 * slope_grid).astype(np.float32)
    wind_factor = gaussian_filter(wind_factor, sigma=2).astype(np.float32)

    wind_speed = np.empty((len(times), n_lat, n_lon), dtype=np.float32)
    pressure   = np.empty((len(times), n_lat, n_lon), dtype=np.float32)
    for t in range(len(times)):
        wind_speed[t] = (base_wind_speed[t] + wind_factor + np.random.normal(0, 1, (n_lat, n_lon))).astype(np.float32)
        pressure[t]   = (1013.0 - 0.1 * elevation_grid + np.random.normal(0, 5, (n_lat, n_lon))).astype(np.float32)

    thermal = (wind_speed * 1000.0 / np.clip(pressure, 1e-3, None)).astype(np.float32)
    turbine_active = (wind_speed > 3).astype(np.uint8)

    ds = xr.Dataset(
        {
            "wind_speed": (["time", "lat", "lon"], wind_speed,
                           {"units": "m s-1", "standard_name": "wind_speed",
                            "long_name": "Wind speed at hub height"}),
            "pressure":   (["time", "lat", "lon"], pressure,
                           {"units": "hPa", "standard_name": "air_pressure",
                            "long_name": "Air pressure at surface"}),
            "thermal":    (["time", "lat", "lon"], thermal,
                           {"units": "m2 s-2 hPa-1", "long_name": "Thermal uplift potential"}),
            "turbine_active": (["time", "lat", "lon"], turbine_active,
                               {"units": "1", "long_name": "Turbine active flag (1=active)"}),
            "elevation":  (["lat", "lon"], elevation_grid.astype(np.float32),
                           {"units": "m", "standard_name": "surface_altitude"}),
            "slope":      (["lat", "lon"], slope_grid.astype(np.float32),
                           {"units": "degrees", "long_name": "Surface slope"}),
        },
        coords={
            "time": times,
            "lat": (["lat"], lat_axis.astype(np.float64),
                    {"units": "degrees_north", "standard_name": "latitude"}),
            "lon": (["lon"], lon_axis.astype(np.float64),
                    {"units": "degrees_east", "standard_name": "longitude"}),
        },
        attrs={
            "title": "Synthetic Weather Dataset",
            "institution": "Generated by black_harrier_abm",
            "source": "Simulated from DEM (raster or geojson) + random weather model",
            "history": f"Created {dt.datetime.utcnow().isoformat()} UTC",
            "references": "None",
        },
    )
    return ds


def write_weather_netcdf(ds: xr.Dataset) -> str:
    """
    Write CF-friendly NetCDF with safe time encoding.
    """
    with tempfile.NamedTemporaryFile(suffix=".nc", delete=False) as f:
        ds.to_netcdf(
            f.name,
            encoding={"time": {"dtype": "int32",
                               "units": "hours since 2023-01-01 00:00:00",
                               "calendar": "gregorian"}}
        )
        return f.name
